<shaders>
    <shader name="quantum_LSD">
        <parameters>
			<param name="Enabled" type="float"/>
			<param name="Time" type="float"/>
		</parameters>
		<vertex><![CDATA[
			attribute vec3 Position;
			attribute vec4 Color;
			attribute vec2 TexCoord;
			attribute vec4 RenderData;
			attribute float Scale;
			attribute float Enabled;
			attribute float Time;
			varying vec4 Color0;
			varying vec2 TexCoord0;
			varying vec4 RenderDataOut;
			varying float ScaleOut;
			varying float EnabledOut;
			varying float TimeOut;
			uniform mat4 Transform;
			void main(void)
			{
				RenderDataOut = RenderData;
				ScaleOut = Scale;			// Passing data to fragment shader
				EnabledOut = Enabled;	    // Passing data to fragment shader
				TimeOut = Time;				// Passing data to fragment shader
				Color0 = Color;
				TexCoord0 = TexCoord;
				gl_Position = Transform * vec4(Position.xyz, 1.0);
			}
		]]></vertex>
		<fragment><![CDATA[
			varying lowp vec4 Color0;
			varying mediump vec2 TexCoord0;
			varying lowp vec4 RenderDataOut;
			varying lowp float ScaleOut;
			varying lowp float EnabledOut;
			varying mediump float TimeOut;
			uniform sampler2D Texture0;

            // All components are in the range [0â€¦1], including hue.
            vec3 hsv2rgb(vec3 c)
            {
                vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);
                vec3 p = abs(fract(c.xxx + K.xyz) * 6.0 - K.www);
                return c.z * mix(K.xxx, clamp(p - K.xxx, 0.0, 1.0), c.y);
            }

            vec2 shift( vec2 p, float speed, float rep, float t) 
            {                        
                float d = t * speed;
                vec2 f = rep * (p + d);
                vec2 q = cos( vec2(
                    cos(f.x - f.y) * cos(f.y),
                    sin(f.x + f.y) * sin(f.y) ) );
                return q;
            }
            
            vec2 getWavyTexCoords(vec2 texCoords, float speed, float rep, float amp, float time)
            {
                vec2 r = texCoords / RenderDataOut.zw;
                vec2 p = shift(r, speed, rep, time);
                vec2 q = shift(r + 1.0, speed, rep, time);
                float amplitude = amp / RenderDataOut.z;
                return r + amplitude * (p - q);
            }
            
            #define M_PI 3.1415926535897932384626
            float mod289(const in float x) { return x - floor(x * (1. / 289.)) * 289.; }
            vec2 mod289(const in vec2 x) { return x - floor(x * (1. / 289.)) * 289.; }
            vec3 mod289(const in vec3 x) { return x - floor(x * (1. / 289.)) * 289.; }
            vec4 mod289(const in vec4 x) { return x - floor(x * (1. / 289.)) * 289.; }
            float permute(const in float v) { return mod289(((v * 34.0) + 1.0) * v); }
            vec2 permute(const in vec2 v) { return mod289(((v * 34.0) + 1.0) * v); }
            vec3 permute(const in vec3 v) { return mod289(((v * 34.0) + 1.0) * v); }
            vec4 permute(const in vec4 v) { return mod289(((v * 34.0) + 1.0) * v); }
            float taylorInvSqrt(in float r) { return 1.79284291400159 - 0.85373472095314 * r; }
            vec2 taylorInvSqrt(in vec2 r) { return 1.79284291400159 - 0.85373472095314 * r; }
            vec3 taylorInvSqrt(in vec3 r) { return 1.79284291400159 - 0.85373472095314 * r; }
            vec4 taylorInvSqrt(in vec4 r) { return 1.79284291400159 - 0.85373472095314 * r; }
            float snoise(in vec3 v) {
                const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;
                const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);

                // First corner
                vec3 i  = floor(v + dot(v, C.yyy) );
                vec3 x0 =   v - i + dot(i, C.xxx) ;

                // Other corners
                vec3 g = step(x0.yzx, x0.xyz);
                vec3 l = 1.0 - g;
                vec3 i1 = min( g.xyz, l.zxy );
                vec3 i2 = max( g.xyz, l.zxy );

                //   x0 = x0 - 0.0 + 0.0 * C.xxx;
                //   x1 = x0 - i1  + 1.0 * C.xxx;
                //   x2 = x0 - i2  + 2.0 * C.xxx;
                //   x3 = x0 - 1.0 + 3.0 * C.xxx;
                vec3 x1 = x0 - i1 + C.xxx;
                vec3 x2 = x0 - i2 + C.yyy; // 2.0*C.x = 1/3 = C.y
                vec3 x3 = x0 - D.yyy;      // -1.0+3.0*C.x = -0.5 = -D.y

                // Permutations
                i = mod289(i);
                vec4 p = permute( permute( permute(
                            i.z + vec4(0.0, i1.z, i2.z, 1.0 ))
                        + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))
                        + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));

                // Gradients: 7x7 points over a square, mapped onto an octahedron.
                // The ring size 17*17 = 289 is close to a multiple of 49 (49*6 = 294)
                float n_ = 0.142857142857; // 1.0/7.0
                vec3  ns = n_ * D.wyz - D.xzx;

                vec4 j = p - 49.0 * floor(p * ns.z * ns.z);  //  mod(p,7*7)

                vec4 x_ = floor(j * ns.z);
                vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)

                vec4 x = x_ *ns.x + ns.yyyy;
                vec4 y = y_ *ns.x + ns.yyyy;
                vec4 h = 1.0 - abs(x) - abs(y);

                vec4 b0 = vec4( x.xy, y.xy );
                vec4 b1 = vec4( x.zw, y.zw );

                //vec4 s0 = vec4(lessThan(b0,0.0))*2.0 - 1.0;
                //vec4 s1 = vec4(lessThan(b1,0.0))*2.0 - 1.0;
                vec4 s0 = floor(b0)*2.0 + 1.0;
                vec4 s1 = floor(b1)*2.0 + 1.0;
                vec4 sh = -step(h, vec4(0.0));

                vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;
                vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;

                vec3 p0 = vec3(a0.xy,h.x);
                vec3 p1 = vec3(a0.zw,h.y);
                vec3 p2 = vec3(a1.xy,h.z);
                vec3 p3 = vec3(a1.zw,h.w);

                //Normalise gradients
                vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));
                p0 *= norm.x;
                p1 *= norm.y;
                p2 *= norm.z;
                p3 *= norm.w;

                // Mix final noise value
                vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);
                m = m * m;
                return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),
                                            dot(p2,x2), dot(p3,x3) ) );
            }

            const float wavySpeed = 0.15;
            const float wavyRepitition = 8.0;
            const float wavyAmplitude = 30.0;
            const float colorIntensity = 0.75;
            const float colorCycleTime = 2.0;
            const vec2 colorRange = vec2(-0.5, 0.5);
            const int dizzyAmount = 5;
            const vec2 dizzyOffset = vec2(0, 30);
            const vec2 dizzyScale = vec2(1, 2);
            const float dizzyIntensity = 0.25;
            const float dizzySpeed = 3.0;

			void main(void)
			{
                vec2 texCoords = TexCoord0;
                vec4 color = Color0;
                if (EnabledOut > 0)
                {
                    texCoords = getWavyTexCoords(gl_FragCoord.xy, wavySpeed, wavyRepitition, wavyAmplitude, TimeOut);
                    float noiseValue = snoise(vec3(TexCoord0 * 2.0, TimeOut * 0.75)) * (colorRange.y - colorRange.x) + colorRange.x;
                    vec4 rainbowColor = vec4(hsv2rgb(vec3((TimeOut + noiseValue) / colorCycleTime, 1, 1)) * colorIntensity, 1);

                    for (int i = 0; i < dizzyAmount; ++i)
                    {
                        float angle = (i + fract(TimeOut / 5.0)) / dizzyAmount * 2.0 * M_PI;
                        vec2 offset = vec2(cos(angle), sin(angle)) * (((sin(TimeOut * dizzySpeed) + 1) / 2.0) * (dizzyOffset.y - dizzyOffset.x) + dizzyOffset.x);
                        vec2 newCoords = getWavyTexCoords(gl_FragCoord.xy + offset, wavySpeed, wavyRepitition, wavyAmplitude, TimeOut);
                        color += texture2D(Texture0, newCoords) * dizzyIntensity;
                    }

                    color += rainbowColor;
                }
                float lerp = clamp(EnabledOut, 0.0, 1.0);
				gl_FragColor = mix(Color0, color, lerp) * texture2D(Texture0, mix(TexCoord0, texCoords, lerp));
			}
		]]></fragment>
    </shader>
</shaders>